@startuml chess

class Chess {
    + start():void
    + {static} main()
}

Chess *--> Board
Chess *--> Player
Chess *--> Turn

Turn "- players[2]" --> Player

class Turn {
    + next():Player
}

Player --> Board
Player --> Color
Player --> Movement

Movement --> Coordinate
Movement --> Color


class Player {
    + play():void
}


class Board {
    + isValidMove(Movement):boolean
    + execute(Movement):void
    + isCheckmate():boolean
}

Board *--> Square
Square --> Piece
Square ..> AbstractPath

class Square {
    + isValidToMovePieceBetween(AbstractPath):boolean
    + isValidToTake(Color):boolean
    + isValidToPut(Color):boolean
    + hasPiece():boolean
    + hasPiece(Color):boolean
    + hasKing():boolean
}

Board --> Movement
Board --> AbstractPath
Piece --> Color
Piece ..> AbstractPath

abstract class AbstractPath {
    + isClearpath():boolean
    + {abstract} isClearTarget():boolean
}
AbstractPath <|-- Path
AbstractPath <|-- IndeterminatePath
AbstractPath --> Movement

abstract class Piece {
    # {abstract} isValidToMoveBetween(AbstractPath):boolean
}

Piece <|-- Pawn
Piece <|-- Knight
Piece <|-- King

Enum Color {
    BLACK
    WHITE
}

class Coordinate {
    + horizontalDistance(Coordinate):int
    + verticalDistance(Coordinate):int
    + direction(Coordinate):Direction
    + orientation(Coordinate):Orientation
    + displaced(Direction, Orientation):Coordinate
}
Coordinate ..> Direction
enum Direction {
    HORIZONTAL
    VERTICAL
    DIAGONAL
    INVERSE
    NONE
}

Coordinate ..> Orientation
enum Orientation {
    POSITIVE
    NEGATIVE
}

@enduml
